#!/usr/bin/env python3
"""
Bot de Automa√ß√£o TCAdmin - Vers√£o Principal
Processa pedidos individuais e cria usu√°rios completos no TCAdmin
Inclui se√ß√£o de perfil com dados do Supabase
"""

import time
import logging
import random
import string
import secrets
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
import requests
import json

class TCAdminBot:
    def __init__(self, headless=False):
        """Inicializa o bot principal"""
        self.driver = None
        self.wait = None
        self.headless = headless
        self.setup_logging()
        
        # Configura√ß√µes do Supabase
        self.supabase_url = "https://gxvcovuwtbpkvzqdbcbr.supabase.co"
        self.supabase_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd4dmNvdnV3dGJwa3Z6cWRiY2JyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyMDU0MzgsImV4cCI6MjA2Mzc4MTQzOH0.O9Z831v0AJaBvtYyGUcDMBuVNmONNqWkIhJYuVa3FpM"
        
    def setup_logging(self):
        """Configura o sistema de logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('bot_automation.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def setup_driver(self):
        """Configura e inicializa o driver do Chrome"""
        try:
            chrome_options = Options()
            
            if self.headless:
                chrome_options.add_argument('--headless')
                self.logger.info("Modo headless ativado")
            else:
                self.logger.info("Modo VISUAL ativado - voc√™ ver√° o navegador")
            
            # Configura√ß√µes otimizadas
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--disable-web-security')
            chrome_options.add_argument('--window-size=1920,1080')
            chrome_options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.wait = WebDriverWait(self.driver, 30)
            
            self.logger.info("Driver do Chrome inicializado com sucesso")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro ao inicializar o driver: {str(e)}")
            return False
    
    def get_order_from_supabase(self, order_id):
        """Busca um pedido espec√≠fico no Supabase"""
        try:
            self.logger.info(f"üîç Buscando pedido {order_id} no Supabase...")
            
            # URL da API do Supabase
            url = f"{self.supabase_url}/rest/v1/orders"
            
            # Headers para autentica√ß√£o
            headers = {
                'apikey': self.supabase_key,
                'Authorization': f'Bearer {self.supabase_key}',
                'Content-Type': 'application/json'
            }
            
            # Par√¢metros da query
            params = {
                'id': f'eq.{order_id}',
                'select': 'id,user_id,plan_id,status,price_at_order,currency_at_order,user_notes,server_name_preference,created_at,slots'
            }
            
            # Fazer requisi√ß√£o
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                orders = response.json()
                if orders:
                    order = orders[0]
                    self.logger.info(f"‚úÖ Pedido {order_id} encontrado no Supabase")
                    return order
                else:
                    self.logger.warning(f"‚ö†Ô∏è Pedido {order_id} n√£o encontrado no Supabase, usando dados simulados")
                    return self.get_simulated_order_data(order_id)
            else:
                self.logger.warning(f"‚ö†Ô∏è Erro ao buscar pedido: {response.status_code}, usando dados simulados")
                return self.get_simulated_order_data(order_id)
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erro ao conectar com Supabase: {str(e)}, usando dados simulados")
            return self.get_simulated_order_data(order_id)
    
    def get_simulated_order_data(self, order_id):
        """Retorna dados simulados para demonstra√ß√£o"""
        simulated_orders = {
            '8f838023-ab78-4468-ad2b-b830894fb156': {
                'id': '8f838023-ab78-4468-ad2b-b830894fb156',
                'user_id': '07aed47d-def0-4e24-9347-d3b86f0e2c10',
                'plan_id': '0cd3d499-b611-4751-8c1e-adb494c836e1',
                'status': 'pending',
                'price_at_order': 29.90,
                'currency_at_order': 'BRL',
                'user_notes': 'Pedido de teste para bot',
                'server_name_preference': 'teste_servidor_001',
                'created_at': '2025-10-05T10:00:00.000Z',
                'slots': 19  # Slots do plano Starter (conforme teste)
            },
            'test-professional': {
                'id': 'test-professional',
                'user_id': '07aed47d-def0-4e24-9347-d3b86f0e2c10',
                'plan_id': '10ae6193-4751-8c1e-adb494c836e1',
                'status': 'pending',
                'price_at_order': 59.90,
                'currency_at_order': 'BRL',
                'user_notes': 'Pedido Professional para teste',
                'server_name_preference': 'servidor_professional',
                'created_at': '2025-10-05T10:00:00.000Z',
                'slots': 25  # Slots do plano Professional
            },
            'test-enterprise': {
                'id': 'test-enterprise',
                'user_id': '07aed47d-def0-4e24-9347-d3b86f0e2c10',
                'plan_id': '2c04849a-4751-8c1e-adb494c836e1',
                'status': 'pending',
                'price_at_order': 99.90,
                'currency_at_order': 'BRL',
                'user_notes': 'Pedido Enterprise para teste',
                'server_name_preference': 'servidor_enterprise',
                'created_at': '2025-10-05T10:00:00.000Z',
                'slots': 50  # Slots do plano Enterprise
            }
        }
        
        if order_id in simulated_orders:
            self.logger.info(f"‚úÖ Dados simulados encontrados para pedido {order_id}")
            return simulated_orders[order_id]
        else:
            self.logger.error(f"‚ùå Pedido {order_id} n√£o encontrado nos dados simulados")
            return None
    
    def generate_rcon_password(self):
        """Gera uma senha RCON aleat√≥ria"""
        characters = string.ascii_letters + string.digits + "!@#$%^&*"
        rcon_password = ''.join(secrets.choice(characters) for _ in range(16))
        return rcon_password
    
    def get_user_profile_from_supabase(self, user_id):
        """Busca dados do perfil do usu√°rio no Supabase"""
        try:
            self.logger.info(f"üë§ Buscando perfil do usu√°rio {user_id} no Supabase...")
            
            # URL da API do Supabase
            url = f"{self.supabase_url}/rest/v1/profiles"
            
            # Headers para autentica√ß√£o
            headers = {
                'apikey': self.supabase_key,
                'Authorization': f'Bearer {self.supabase_key}',
                'Content-Type': 'application/json'
            }
            
            # Par√¢metros da query - busca por user_id na tabela profiles
            params = {
                'user_id': f'eq.{user_id}',
                'select': 'phone,email,full_name'
            }
            
            # Fazer requisi√ß√£o
            response = requests.get(url, headers=headers, params=params)
            
            if response.status_code == 200:
                profiles = response.json()
                self.logger.info(f"üìä Resposta do Supabase: {profiles}")
                if profiles:
                    profile = profiles[0]
                    self.logger.info(f"‚úÖ Perfil encontrado para usu√°rio {user_id}: {profile}")
                    return profile
                else:
                    self.logger.warning(f"‚ö†Ô∏è Perfil n√£o encontrado para usu√°rio {user_id}, usando dados simulados")
                    return self.get_simulated_profile_data(user_id)
            else:
                self.logger.warning(f"‚ö†Ô∏è Erro ao buscar perfil: {response.status_code}, usando dados simulados")
                return self.get_simulated_profile_data(user_id)
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erro ao conectar com Supabase: {str(e)}, usando dados simulados")
            return self.get_simulated_profile_data(user_id)
    
    def get_simulated_profile_data(self, user_id):
        """Retorna dados simulados do perfil para demonstra√ß√£o"""
        simulated_profiles = {
            '07aed47d-def0-4e24-9347-d3b86f0e2c10': {
                'phone': '+55 11 99999-9999',
                'email': 'usuario.teste@email.com',
                'timezone': 'America/Sao_Paulo'
            }
        }
        
        if user_id in simulated_profiles:
            self.logger.info(f"‚úÖ Dados simulados do perfil encontrados para usu√°rio {user_id}")
            return simulated_profiles[user_id]
        else:
            self.logger.warning(f"‚ö†Ô∏è Perfil n√£o encontrado para usu√°rio {user_id}, usando dados padr√£o")
            return self.get_default_profile_data()
    
    def get_default_profile_data(self):
        """Retorna dados padr√£o do perfil"""
        return {
            'phone': '+55 11 00000-0000',
            'email': 'default@email.com',
            'timezone': 'America/Sao_Paulo'
        }
    
    def update_order_status_in_supabase(self, order_id, status='completed'):
        """Atualiza status do pedido no Supabase"""
        try:
            self.logger.info(f"üîÑ Atualizando status do pedido {order_id} para {status}")
            
            url = f"{self.supabase_url}/rest/v1/orders"
            headers = {
                'apikey': self.supabase_key,
                'Authorization': f'Bearer {self.supabase_key}',
                'Content-Type': 'application/json',
                'Prefer': 'return=minimal'
            }
            
            data = {
                'status': status,
                'updated_at': datetime.now().isoformat()
            }
            
            response = requests.patch(
                f"{url}?id=eq.{order_id}",
                headers=headers,
                json=data
            )
            
            if response.status_code == 200 or response.status_code == 204:
                self.logger.info(f"‚úÖ Status do pedido {order_id} atualizado para {status}")
                return True
            else:
                self.logger.error(f"‚ùå Erro ao atualizar pedido: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao atualizar pedido no Supabase: {str(e)}")
            return False
    
    def navigate_to_admin_panel(self, url="https://tcadmin.xyz/"):
        """Navega para o painel admin"""
        try:
            self.logger.info(f"üåê Navegando para: {url}")
            self.driver.get(url)
            time.sleep(5)
            
            if "tcadmin" in self.driver.title.lower() or "login" in self.driver.title.lower():
                self.logger.info("‚úÖ P√°gina do painel admin carregada com sucesso")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è P√°gina pode n√£o ter carregado corretamente")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao navegar para o painel admin: {str(e)}")
            return False
    
    def login(self, username, password, tcadmin_url=None):
        """Realiza login no painel admin"""
        try:
            # Inicializa o driver se n√£o estiver inicializado
            if self.driver is None:
                self.setup_driver()
            
            # Navega para o TCAdmin primeiro
            import os
            if not tcadmin_url:
                tcadmin_url = os.getenv('TCADMIN_URL', 'https://tcadmin.xyz/')
            if not self.navigate_to_admin_panel(tcadmin_url):
                self.logger.error("‚ùå Falha ao navegar para o painel admin")
                return False
            
            self.logger.info("üîê Iniciando processo de login")
            
            # Aguarda a p√°gina carregar completamente
            time.sleep(5)
            
            # Usa os seletores corretos descobertos
            username_field = self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@name='UserName']")))
            password_field = self.driver.find_element(By.XPATH, "//input[@name='Password']")
            
            # Preenche os campos
            username_field.clear()
            username_field.send_keys(username)
            self.logger.info("‚úÖ Usu√°rio inserido")
            
            password_field.clear()
            password_field.send_keys(password)
            self.logger.info("‚úÖ Senha inserida")
            
            # Clica no bot√£o de login
            login_button = self.driver.find_element(By.XPATH, "//button[@type='submit']")
            login_button.click()
            self.logger.info("‚úÖ Bot√£o de login clicado")
            
            # Aguarda o redirecionamento
            time.sleep(8)
            
            # Verifica se o login foi bem-sucedido
            if self.is_logged_in():
                self.logger.info("üéâ Login realizado com sucesso!")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Falha no login")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante o login: {str(e)}")
            return False
    
    def is_logged_in(self):
        """Verifica se o usu√°rio est√° logado"""
        try:
            # Inicializa o driver se n√£o estiver inicializado
            if self.driver is None:
                self.setup_driver()
            
            current_url = self.driver.current_url
            if "login" not in current_url.lower() and "tcadmin" in current_url.lower():
                return True
            
            # Procura por elementos que indicam que est√° logado
            logged_in_indicators = [
                "a[href*='logout']",
                "a[href*='admin']",
                ".user-menu",
                ".admin-panel"
            ]
            
            for indicator in logged_in_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, f"//*[contains(@class, 'success') or contains(@class, 'alert-success') or contains(@class, 'success-message')]")
                    if elements:
                        return True
                except Exception:
                    continue
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar status de login: {str(e)}")
            return False
    
    def navigate_to_create_user(self):
        """Navega para a p√°gina de cria√ß√£o de usu√°rio"""
        try:
            self.logger.info("üñ±Ô∏è Navegando para User Management ‚Üí Create a User...")
            
            # 1. Clica em "User Management"
            self.logger.info("üîç Procurando 'User Management'...")
            
            # Tenta diferentes estrat√©gias para encontrar o link
            user_management_link = None
            
            # Estrat√©gia 1: Busca por texto exato
            try:
                user_management_link = self.driver.find_element(By.LINK_TEXT, "User Management")
                self.logger.info("‚úÖ Encontrado por LINK_TEXT")
            except:
                pass
            
            # Estrat√©gia 2: Busca por texto parcial
            if not user_management_link:
                try:
                    user_management_link = self.driver.find_element(By.PARTIAL_LINK_TEXT, "User Management")
                    self.logger.info("‚úÖ Encontrado por PARTIAL_LINK_TEXT")
                except:
                    pass
            
            # Estrat√©gia 3: Busca por XPath com texto
            if not user_management_link:
                try:
                    user_management_link = self.driver.find_element(By.XPATH, "//a[contains(text(), 'User Management')]")
                    self.logger.info("‚úÖ Encontrado por XPath")
                except:
                    pass
            
            # Estrat√©gia 4: Busca em todos os links
            if not user_management_link:
                user_management_links = self.driver.find_elements(By.XPATH, "//a")
                for link in user_management_links:
                    if "user management" in link.text.lower():
                        user_management_link = link
                        self.logger.info("‚úÖ Encontrado por busca em todos os links")
                        break
            
            if user_management_link:
                user_management_link.click()
                self.logger.info("‚úÖ Clicado em 'User Management'")
                time.sleep(3)
            else:
                self.logger.error("‚ùå Link 'User Management' n√£o encontrado")
                # Lista todos os links dispon√≠veis para debug
                all_links = self.driver.find_elements(By.XPATH, "//a")
                self.logger.info("üîç Links dispon√≠veis:")
                for i, link in enumerate(all_links[:10]):  # Mostra apenas os primeiros 10
                    self.logger.info(f"   {i+1}. '{link.text}'")
                return False
            
            # 2. Clica em "Create a User"
            self.logger.info("üîç Procurando 'Create a User'...")
            
            # Tenta diferentes estrat√©gias para encontrar o link
            create_user_link = None
            
            # Estrat√©gia 1: Busca por texto exato
            try:
                create_user_link = self.driver.find_element(By.LINK_TEXT, "Create a User")
                self.logger.info("‚úÖ Encontrado por LINK_TEXT")
            except:
                pass
            
            # Estrat√©gia 2: Busca por texto parcial
            if not create_user_link:
                try:
                    create_user_link = self.driver.find_element(By.PARTIAL_LINK_TEXT, "Create a User")
                    self.logger.info("‚úÖ Encontrado por PARTIAL_LINK_TEXT")
                except:
                    pass
            
            # Estrat√©gia 3: Busca por XPath com texto
            if not create_user_link:
                try:
                    create_user_link = self.driver.find_element(By.XPATH, "//a[contains(text(), 'Create a User')]")
                    self.logger.info("‚úÖ Encontrado por XPath")
                except:
                    pass
            
            # Estrat√©gia 4: Busca em todos os links
            if not create_user_link:
                create_user_links = self.driver.find_elements(By.XPATH, "//a")
                for link in create_user_links:
                    if "create a user" in link.text.lower():
                        create_user_link = link
                        self.logger.info("‚úÖ Encontrado por busca em todos os links")
                        break
            
            if create_user_link:
                create_user_link.click()
                self.logger.info("‚úÖ Clicado em 'Create a User'")
                time.sleep(10)  # Aguarda carregar
            else:
                self.logger.error("‚ùå Link 'Create a User' n√£o encontrado")
                # Lista todos os links dispon√≠veis para debug
                all_links = self.driver.find_elements(By.XPATH, "//a")
                self.logger.info("üîç Links dispon√≠veis:")
                for i, link in enumerate(all_links[:10]):  # Mostra apenas os primeiros 10
                    self.logger.info(f"   {i+1}. '{link.text}'")
                return False
            
            self.logger.info(f"üìÑ P√°gina atual: {self.driver.title}")
            self.logger.info(f"üîó URL atual: {self.driver.current_url}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao navegar para cria√ß√£o de usu√°rio: {str(e)}")
            return False
    
    def switch_to_create_user_iframe(self):
        """Muda para o iframe de cria√ß√£o de usu√°rio"""
        try:
            self.logger.info("üñºÔ∏è Procurando iframe de cria√ß√£o de usu√°rio...")
            
            # Procura pelo iframe correto
            iframes = self.driver.find_elements(By.XPATH, "//iframe")
            create_user_iframe = None
            
            for iframe in iframes:
                iframe_src = iframe.get_attribute("src") or ""
                if "CreateUser.aspx" in iframe_src:
                    create_user_iframe = iframe
                    break
            
            if create_user_iframe:
                self.driver.switch_to.frame(create_user_iframe)
                self.logger.info("‚úÖ Mudou para iframe de cria√ß√£o de usu√°rio")
                time.sleep(3)
                return True
            else:
                self.logger.error("‚ùå Iframe de cria√ß√£o de usu√°rio n√£o encontrado")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao mudar para iframe: {str(e)}")
            return False
    
    def generate_random_password(self, length=12):
        """Gera senha aleat√≥ria"""
        characters = string.ascii_letters + string.digits + "!@#$%^&*"
        return ''.join(random.choice(characters) for _ in range(length))
    
    def create_user_in_tcadmin(self, order_data):
        """Cria usu√°rio no TCAdmin usando dados espec√≠ficos do pedido"""
        try:
            # Extrai dados do pedido
            username = order_data.get('server_name_preference', f"user_{order_data['id']}")
            # Usa o tcadmin_id do pedido (n√£o gera aleat√≥rio)
            billing_id = order_data.get('tcadmin_id', str(order_data['id'])[:8])
            password = self.generate_random_password()
            user_id = order_data.get('user_id')
            
            self.logger.info(f"üë§ Criando usu√°rio para pedido {order_data['id']}:")
            self.logger.info(f"   üìù Nome: {username}")
            self.logger.info(f"   üí≥ Billing ID: {billing_id}")
            self.logger.info(f"   üîê Senha: {password}")
            
            # Navega para a p√°gina de cria√ß√£o de usu√°rio primeiro
            if not self.navigate_to_create_user():
                self.logger.error("‚ùå Falha ao navegar para p√°gina de cria√ß√£o de usu√°rio")
                return False
            
            # Muda para o iframe
            if not self.switch_to_create_user_iframe():
                return False
            
            # === ETAPA 1: DADOS INICIAIS ===
            self.logger.info("üìã Preenchendo dados iniciais...")
            
            # Preenche campo de username
            username_field = self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_TextBoxLabelUserNameTextBox']"
            )))
            username_field.clear()
            username_field.send_keys(username)
            self.logger.info("‚úÖ Username preenchido")
            
            # Preenche campo de password
            password_field = self.driver.find_element(
                By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_TextBoxPassword']"
            )
            password_field.clear()
            password_field.send_keys(password)
            self.logger.info("‚úÖ Password preenchido")
            
            # Preenche campo de billing ID
            billing_field = self.driver.find_element(
                By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_TextBoxBillingId']"
            )
            billing_field.clear()
            billing_field.send_keys(billing_id)
            self.logger.info("‚úÖ Billing ID preenchido")
            
            # === ETAPA 2: SE√á√ÉO PERFIL ===
            self.logger.info("üë§ Acessando se√ß√£o de perfil...")
            
            # Procura pelo bot√£o "Perfil" ou "Profile"
            try:
                profile_button = self.driver.find_element(By.XPATH, "//*[@id='TabProfile']")
                profile_button.click()
                self.logger.info("‚úÖ Clicado em 'Perfil'")
                time.sleep(3)
                
                # Usa dados do perfil que j√° est√£o no order_data (j√° buscados corretamente)
                profile_data = order_data.get('profile', {})
                self.logger.info(f"üìä Usando dados do perfil do order_data: {profile_data}")
                
                # Preenche celular (campo celular, n√£o telefone residencial)
                try:
                    phone_field = self.driver.find_element(By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_TextBoxMobilePhoneTextBox']")
                    phone_field.clear()
                    phone_field.send_keys(profile_data.get('phone', ''))
                    self.logger.info(f"‚úÖ Celular preenchido: {profile_data.get('phone', '')}")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erro ao preencher celular: {str(e)}")
                
                # Preenche email prim√°rio
                try:
                    email_field = self.driver.find_element(By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_TextBoxPrimaryEmailTextBox']")
                    email_field.clear()
                    email_field.send_keys(profile_data.get('email', ''))
                    self.logger.info(f"‚úÖ Email prim√°rio preenchido: {profile_data.get('email', '')}")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erro ao preencher email prim√°rio: {str(e)}")
                
                # Configura fuso hor√°rio para Bras√≠lia
                try:
                    timezone_field = self.driver.find_element(By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_DropDownListTimeZone']")
                    timezone_field.send_keys("America/Sao_Paulo")
                    self.logger.info("‚úÖ Fuso hor√°rio configurado para Bras√≠lia")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Erro ao configurar fuso hor√°rio: {str(e)}")
                
                self.logger.info("‚úÖ Se√ß√£o de perfil preenchida com sucesso")
            except:
                self.logger.warning("‚ö†Ô∏è Bot√£o 'Perfil' n√£o encontrado, continuando sem dados de perfil")
            
            
            # === ETAPA 3: CLICAR EM SALVE ===
            try:
                self.logger.info("üíæ Procurando bot√£o 'Salve'...")
                
                # Procura pelo bot√£o "Salve" ou "Save"
                try:
                    save_button = self.driver.find_element(By.XPATH, "//*[@id='ContentPlaceHolderMain_UserDetails1_TabToolBar1_RadToolBar1']/div[1]/div[1]/div[1]/ul[1]/li[1]/a[1]")
                    save_button.click()
                    self.logger.info("‚úÖ Bot√£o 'Salve' clicado com sucesso!")
                    time.sleep(5)
                    
                    if self.verify_user_created(username):
                        self.logger.info(f"üéâ Usu√°rio {username} criado com sucesso!")
                        
                        # === ETAPA 4: CRIAR SERVI√áO PARA O USU√ÅRIO ===
                        self.logger.info("‚úÖ Etapa de cria√ß√£o de usu√°rio conclu√≠da!")
                        self.logger.info("üõ†Ô∏è Iniciando cria√ß√£o de servi√ßo...")
                        
                        # Pegar slots do pedido
                        slots = order_data.get('slots', 8)  # Pega da coluna slots do pedido
                        
                        if self.create_service_for_user(username, slots, order_data):
                            self.logger.info(f"üéâ Servi√ßo criado para usu√°rio {username}!")
                            return True
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Erro ao criar servi√ßo para usu√°rio {username}")
                            return True  # Usu√°rio foi criado, mesmo se servi√ßo falhar
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Usu√°rio {username} pode n√£o ter sido criado")
                        return False
                except:
                    self.logger.info("üîÑ Tentando submit via JavaScript...")
                    self.driver.execute_script("document.forms[0].submit();")
                    self.logger.info("‚úÖ Submit via JavaScript executado")
                    time.sleep(5)
                    
                    if self.verify_user_created(username):
                        self.logger.info(f"üéâ Usu√°rio {username} criado com sucesso!")
                        
                        # === ETAPA 4: CRIAR SERVI√áO PARA O USU√ÅRIO ===
                        self.logger.info("‚úÖ Etapa de cria√ß√£o de usu√°rio conclu√≠da!")
                        self.logger.info("üõ†Ô∏è Iniciando cria√ß√£o de servi√ßo...")
                        
                        # Pegar slots do pedido
                        slots = order_data.get('slots', 8)  # Pega da coluna slots do pedido
                        
                        if self.create_service_for_user(username, slots, order_data):
                            self.logger.info(f"üéâ Servi√ßo criado para usu√°rio {username}!")
                            return True
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Erro ao criar servi√ßo para usu√°rio {username}")
                            return True  # Usu√°rio foi criado, mesmo se servi√ßo falhar
                    else:
                        self.logger.warning(f"‚ö†Ô∏è Usu√°rio {username} pode n√£o ter sido criado")
                        return False
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao clicar em Salve: {str(e)}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao criar usu√°rio: {str(e)}")
            return False
    
    def verify_user_created(self, username):
        """Verifica se o usu√°rio foi criado com sucesso"""
        try:
            # Procura por mensagens de sucesso ou redirecionamento
            success_indicators = [
                "user created",
                "usu√°rio criado",
                "success",
                "sucesso",
                "created successfully",
                "criado com sucesso"
            ]
            
            page_source = self.driver.page_source.lower()
            for indicator in success_indicators:
                if indicator in page_source:
                    return True
            
            # Verifica se a URL mudou (indicando redirecionamento)
            current_url = self.driver.current_url
            if "createuser" not in current_url.lower():
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar cria√ß√£o do usu√°rio: {str(e)}")
            return False
    
    def create_service_for_user(self, username, slots=8, order_data=None):
        """Cria um servi√ßo para o usu√°rio rec√©m-criado"""
        try:
            self.logger.info(f"üõ†Ô∏è Criando servi√ßo para usu√°rio {username} com {slots} slots...")
            
            # 1. Volta para a p√°gina principal primeiro
            self.logger.info("üè† Voltando para p√°gina principal...")
            try:
                home_link = self.driver.find_element(By.XPATH, "//a[contains(text(), 'Home') or contains(text(), 'In√≠cio')]")
                home_link.click()
                self.logger.info("‚úÖ Clicado em 'Home'")
                time.sleep(3)
            except:
                self.logger.info("‚ö†Ô∏è Link 'Home' n√£o encontrado, continuando...")
            
            # 2. Navega para Service Management usando XPath espec√≠fico
            self.logger.info("üîç Procurando 'Service Management'...")
            try:
                service_management_link = self.driver.find_element(By.XPATH, "//*[@id='category_d3b2aa93-7e2b-4e0d-8080-67d14b2fa8a9_2']")
                service_management_link.click()
                self.logger.info("‚úÖ Clicado em 'Service Management'")
                time.sleep(3)
            except:
                # Fallback: procura por texto
                self.logger.info("üîÑ XPath espec√≠fico falhou, tentando busca por texto...")
                service_management_links = self.driver.find_elements(By.XPATH, "//a")
                service_management_link = None
                
                for link in service_management_links:
                    if "service management" in link.text.lower() or "gerenciamento de servi√ßos" in link.text.lower():
                        service_management_link = link
                        break
                
                if service_management_link:
                    service_management_link.click()
                    self.logger.info("‚úÖ Clicado em 'Service Management' (fallback)")
                    time.sleep(3)
                else:
                    self.logger.error("‚ùå Link 'Service Management' n√£o encontrado")
                    return False
            
            # 3. Clica em "Create a Service" usando XPath espec√≠fico
            self.logger.info("üîç Procurando 'Create a Service'...")
            try:
                create_service_link = self.driver.find_element(By.XPATH, "//*[@id='page_d3b2aa93-7e2b-4e0d-8080-67d14b2fa8a9_11']")
                create_service_link.click()
                self.logger.info("‚úÖ Clicado em 'Create a Service'")
                time.sleep(5)
            except:
                # Fallback: procura por texto
                self.logger.info("üîÑ XPath espec√≠fico falhou, tentando busca por texto...")
                create_service_links = self.driver.find_elements(By.XPATH, "//a")
                create_service_link = None
                
                for link in create_service_links:
                    if "create a service" in link.text.lower() or "create service" in link.text.lower():
                        create_service_link = link
                        break
                
                if create_service_link:
                    create_service_link.click()
                    self.logger.info("‚úÖ Clicado em 'Create a Service' (fallback)")
                    time.sleep(5)
                else:
                    self.logger.error("‚ùå Link 'Create a Service' n√£o encontrado")
                    return False
            
            # 3. Muda para o iframe e procura pelo campo de propriet√°rio
            self.logger.info("üñºÔ∏è Procurando iframe de cria√ß√£o de servi√ßo...")
            try:
                # Procura pelo iframe
                iframes = self.driver.find_elements(By.XPATH, "//iframe")
                create_service_iframe = None
                
                for iframe in iframes:
                    iframe_src = iframe.get_attribute("src") or ""
                    if "CreateGameVoiceServer" in iframe_src or "CreateService" in iframe_src:
                        create_service_iframe = iframe
                        break
                
                if create_service_iframe:
                    self.driver.switch_to.frame(create_service_iframe)
                    self.logger.info("‚úÖ Mudou para iframe de cria√ß√£o de servi√ßo")
                    time.sleep(3)
                else:
                    self.logger.error("‚ùå Iframe de cria√ß√£o de servi√ßo n√£o encontrado")
                    return False
                
                # Procura pelo campo de propriet√°rio dentro do iframe
                self.logger.info("üîç Procurando campo de propriet√°rio...")
                owner_field = self.wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='ContentPlaceHolderMain_CreateGameVoiceServer1_UsersOwner_AdvancedDropDownList1_AdvancedDropDownList1_Input']")))
                self.logger.info("‚úÖ Campo de propriet√°rio encontrado")
                
                # 4. Clica no campo de propriet√°rio para abrir a lista
                self.logger.info(f"üñ±Ô∏è Clicando no campo de propriet√°rio para abrir lista...")
                owner_field.click()
                self.logger.info("‚úÖ Campo de propriet√°rio clicado")
                time.sleep(3)
                
                # 5. Procura pelo usu√°rio rec√©m-criado na lista
                self.logger.info(f"üîç Procurando usu√°rio {username} na lista...")
                try:
                    # Procura por links que contenham o nome do usu√°rio
                    user_links = self.driver.find_elements(By.XPATH, "//a")
                    user_found = False
                    
                    for link in user_links:
                        link_text = link.text or ""
                        if username.lower() in link_text.lower():
                            link.click()
                            self.logger.info(f"‚úÖ Usu√°rio {username} selecionado na lista")
                            user_found = True
                            break
                    
                    if not user_found:
                        # Fallback: procura por input e preenche
                        self.logger.info("üîÑ Usu√°rio n√£o encontrado na lista, tentando preenchimento direto...")
                        owner_field.clear()
                        owner_field.send_keys(username)
                        self.logger.info(f"‚úÖ Propriet√°rio preenchido diretamente: {username}")
                    else:
                        self.logger.info(f"‚úÖ Usu√°rio {username} selecionado com sucesso!")
                    
                    time.sleep(2)
                except Exception as e:
                    self.logger.error(f"‚ùå Erro ao selecionar usu√°rio: {str(e)}")
                    return False
                
                # 6. Configura os slots do servidor
                self.logger.info(f"üîß Configurando {slots} slots para o servidor...")
                try:
                    # Procura por campo de slots (pode variar dependendo da interface)
                    slots_field = self.driver.find_element(By.XPATH, "//*[@id='ContentPlaceHolderMain_CreateGameVoiceServer1_DropDownListGameServers']")
                    slots_field.send_keys(str(slots))
                    self.logger.info(f"‚úÖ Slots configurados: {slots}")
                    time.sleep(2)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Campo de slots n√£o encontrado, usando padr√£o: {str(e)}")
                
                # 7. Clica no bot√£o "Criar um Servi√ßo de Jogo"
                self.logger.info("üîç Procurando bot√£o 'Criar um Servi√ßo de Jogo'...")
                try:
                    game_service_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//*[@id='TabCreateGameServer']")))
                    game_service_button.click()
                    self.logger.info("‚úÖ Bot√£o 'Criar um Servi√ßo de Jogo' clicado")
                    time.sleep(5)
                    
                    # Verifica se foi para a pr√≥xima p√°gina
                    if self.verify_game_service_page():
                        self.logger.info("üéâ Navega√ß√£o para 'Criar um Servi√ßo de Jogo' realizada com sucesso!")
                        
                        # 8. Seleciona o tipo de jogo (Multi Theft Auto - Linux)
                        self.logger.info("üéÆ Selecionando tipo de jogo...")
                        try:
                            # Usar o XPath correto encontrado na an√°lise
                            game_type_select = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//*[@id='ContentPlaceHolderMain_CreateGameVoiceServer1_DropDownListGameServers']")))
                            game_type_select.click()
                            self.logger.info("‚úÖ Select de tipo de jogo clicado")
                            time.sleep(2)
                            
                            # Seleciona "Multi Theft Auto - Linux" (√≠ndice 1)
                            from selenium.webdriver.support.ui import Select
                            select_element = Select(game_type_select)
                            select_element.select_by_index(1)  # Multi Theft Auto - Linux
                            self.logger.info("‚úÖ Multi Theft Auto - Linux selecionado")
                            time.sleep(2)
                            
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è Erro ao selecionar tipo de jogo: {str(e)}")
                        
                        # 9. Analisa e configura a quantidade de slots do plano
                        self.logger.info(f"üîß Analisando e configurando {slots} slots do plano...")
                        try:
                            # Primeiro, analisar todos os inputs na p√°gina para encontrar o campo de slots
                            self.logger.info("üîç Analisando todos os inputs na p√°gina...")
                            inputs = self.driver.find_elements(By.XPATH, "//input")
                            self.logger.info(f"üìã Encontrados {len(inputs)} inputs na p√°gina")
                            
                            slots_field = None
                            for i, input_elem in enumerate(inputs):
                                try:
                                    input_id = input_elem.get_attribute("id")
                                    input_name = input_elem.get_attribute("name")
                                    input_type = input_elem.get_attribute("type")
                                    input_value = input_elem.get_attribute("value")
                                    
                                    # Procurar por campo que contenha "50" (valor padr√£o de slots) e seja vis√≠vel
                                    if input_value and "50" in str(input_value) and input_type != "hidden":
                                        self.logger.info(f"üéØ POSS√çVEL CAMPO DE SLOTS ENCONTRADO!")
                                        self.logger.info(f"   Input {i+1}: ID={input_id}, Name={input_name}, Type={input_type}, Value={input_value}")
                                        
                                        # Verificar se o campo est√° vis√≠vel e interativo
                                        if input_elem.is_displayed() and input_elem.is_enabled():
                                            self.logger.info("‚úÖ Campo est√° vis√≠vel e interativo!")
                                            
                                            # Obter XPath
                                            xpath = self.driver.execute_script("""
                                                function getXPath(element) {
                                                    if (element.id !== '') {
                                                        return '//*[@id="' + element.id + '"]';
                                                    }
                                                    if (element === document.body) {
                                                        return '/html/body';
                                                    }
                                                    var ix = 0;
                                                    var siblings = element.parentNode.childNodes;
                                                    for (var i = 0; i < siblings.length; i++) {
                                                        var sibling = siblings[i];
                                                        if (sibling === element) {
                                                            return getXPath(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + (ix + 1) + ']';
                                                        }
                                                        if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {
                                                            ix++;
                                                        }
                                                    }
                                                }
                                                return getXPath(arguments[0]);
                                            """, input_elem)
                                            
                                            self.logger.info(f"   XPath: {xpath}")
                                            slots_field = input_elem
                                            break
                                        else:
                                            self.logger.info("‚ö†Ô∏è Campo n√£o est√° vis√≠vel ou interativo")
                                        
                                except Exception as e:
                                    continue
                            
                            if slots_field:
                                # Limpar campo completamente
                                slots_field.clear()
                                self.logger.info("‚úÖ Campo de slots limpo")
                                time.sleep(1)
                                
                                # Inserir quantidade de slots do plano
                                slots_field.send_keys(str(slots))
                                self.logger.info(f"‚úÖ {slots} slots inseridos no campo")
                                time.sleep(2)
                            else:
                                self.logger.warning("‚ö†Ô∏è Campo de slots n√£o encontrado, tentando XPath original...")
                                # Tentar XPath original como fallback
                                slots_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, "/html/body/form/div[5]/div[1]/div/div/div[2]/div[1]/div[2]/div[2]/span/div/table/tbody/tr[5]/td[2]/span[1]/input[1]")))
                                slots_field.clear()
                                slots_field.send_keys(str(slots))
                                self.logger.info(f"‚úÖ {slots} slots inseridos via XPath original")
                                time.sleep(2)
                            
                            # 10. Configura o ID de cobran√ßa
                            self.logger.info("üí≥ Configurando ID de cobran√ßa...")
                            try:
                                # Procurar por campo de ID de cobran√ßa usando an√°lise din√¢mica
                                self.logger.info("üîç Procurando campo de ID de cobran√ßa...")
                                billing_inputs = self.driver.find_elements(By.XPATH, "//input")
                                billing_id_field = None
                                
                                for input_elem in billing_inputs:
                                    try:
                                        input_id = input_elem.get_attribute("id")
                                        input_name = input_elem.get_attribute("name")
                                        input_type = input_elem.get_attribute("type")
                                        
                                        # Procurar por campo que contenha "billing" ou "cobran√ßa" no ID ou name
                                        if (input_id and ("billing" in input_id.lower() or "cobran√ßa" in input_id.lower())) or \
                                           (input_name and ("billing" in input_name.lower() or "cobran√ßa" in input_name.lower())):
                                            self.logger.info(f"üéØ CAMPO DE ID DE COBRAN√áA ENCONTRADO!")
                                            self.logger.info(f"   ID: {input_id}, Name: {input_name}, Type: {input_type}")
                                            
                                            if input_elem.is_displayed() and input_elem.is_enabled():
                                                self.logger.info("‚úÖ Campo est√° vis√≠vel e interativo!")
                                                billing_id_field = input_elem
                                                break
                                            else:
                                                self.logger.info("‚ö†Ô∏è Campo n√£o est√° vis√≠vel ou interativo")
                                                
                                    except Exception as e:
                                        continue
                                
                                if billing_id_field:
                                    # Limpar campo completamente
                                    billing_id_field.clear()
                                    self.logger.info("‚úÖ Campo de ID de cobran√ßa limpo")
                                    time.sleep(1)
                                    
                                    # Inserir o mesmo ID de cobran√ßa usado na cria√ß√£o do usu√°rio
                                    if order_data:
                                        billing_id = order_data.get('tcadmin_id', str(order_data['id'])[:8])
                                    else:
                                        billing_id = '983469'  # Fallback se n√£o tiver order_data
                                    billing_id_field.send_keys(billing_id)
                                    self.logger.info(f"‚úÖ ID de cobran√ßa {billing_id} inserido no campo")
                                    time.sleep(2)
                                else:
                                    self.logger.warning("‚ö†Ô∏è Campo de ID de cobran√ßa n√£o encontrado, tentando XPath original...")
                                    # Tentar XPath original como fallback
                                    billing_id_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, "/html/body/form/div[5]/div[1]/div/div/div[2]/div[1]/div[2]/div[2]/span/div/table/tbody/tr[7]/td[2]/span/input")))
                                    billing_id_field.clear()
                                    if order_data:
                                        billing_id = order_data.get('tcadmin_id', str(order_data['id'])[:8])
                                    else:
                                        billing_id = '983469'  # Fallback se n√£o tiver order_data
                                    billing_id_field.send_keys(billing_id)
                                    self.logger.info(f"‚úÖ ID de cobran√ßa {billing_id} inserido via XPath original")
                                    time.sleep(2)
                                
                            except Exception as e:
                                self.logger.warning(f"‚ö†Ô∏è Erro ao configurar ID de cobran√ßa: {str(e)}")
                            
                            # 11. Configura a senha RCON
                            self.logger.info("üîê Configurando senha RCON...")
                            try:
                                # Gerar senha RCON aleat√≥ria
                                rcon_password = self.generate_rcon_password()
                                self.logger.info(f"üîë Senha RCON gerada: {rcon_password}")
                                
                                # Procurar por campo de senha RCON usando an√°lise din√¢mica
                                self.logger.info("üîç Procurando campo de senha RCON...")
                                rcon_inputs = self.driver.find_elements(By.XPATH, "//input")
                                rcon_field = None
                                
                                for input_elem in rcon_inputs:
                                    try:
                                        input_id = input_elem.get_attribute("id")
                                        input_name = input_elem.get_attribute("name")
                                        input_type = input_elem.get_attribute("type")
                                        input_placeholder = input_elem.get_attribute("placeholder")
                                        
                                        # Procurar por campo que contenha "rcon" no ID, name ou placeholder
                                        if (input_id and "rcon" in input_id.lower()) or \
                                           (input_name and "rcon" in input_name.lower()) or \
                                           (input_placeholder and "rcon" in input_placeholder.lower()):
                                            self.logger.info(f"üéØ CAMPO DE SENHA RCON ENCONTRADO!")
                                            self.logger.info(f"   ID: {input_id}, Name: {input_name}, Type: {input_type}, Placeholder: {input_placeholder}")
                                            
                                            if input_elem.is_displayed() and input_elem.is_enabled():
                                                self.logger.info("‚úÖ Campo est√° vis√≠vel e interativo!")
                                                rcon_field = input_elem
                                                break
                                            else:
                                                self.logger.info("‚ö†Ô∏è Campo n√£o est√° vis√≠vel ou interativo")
                                                
                                    except Exception as e:
                                        continue
                                
                                if rcon_field:
                                    # Limpar campo completamente
                                    rcon_field.clear()
                                    self.logger.info("‚úÖ Campo de senha RCON limpo")
                                    time.sleep(1)
                                    
                                    # Inserir senha RCON gerada
                                    rcon_field.send_keys(rcon_password)
                                    self.logger.info(f"‚úÖ Senha RCON {rcon_password} inserida no campo")
                                    time.sleep(2)
                                else:
                                    self.logger.warning("‚ö†Ô∏è Campo de senha RCON n√£o encontrado")
                                
                            except Exception as e:
                                self.logger.warning(f"‚ö†Ô∏è Erro ao configurar senha RCON: {str(e)}")
                            
                            # 12. Clica no bot√£o "Crio" para finalizar o servi√ßo
                            self.logger.info("üöÄ Finalizando cria√ß√£o do servi√ßo...")
                            try:
                                # Procurar pelo bot√£o "Crio" usando an√°lise din√¢mica
                                self.logger.info("üîç Procurando bot√£o 'Crio'...")
                                
                                # Tentar diferentes estrat√©gias para encontrar o bot√£o
                                create_button = None
                                
                                # Estrat√©gia 1: Procurar por bot√µes com texto "Crio", "Criar", "Create"
                                self.logger.info("üîç Estrat√©gia 1: Procurando por texto...")
                                all_buttons = self.driver.find_elements(By.XPATH, "//button")
                                all_inputs = self.driver.find_elements(By.XPATH, "//input")
                                
                                for button in all_buttons:
                                    try:
                                        button_text = button.text.strip()
                                        if "crio" in button_text.lower() or "criar" in button_text.lower() or "create" in button_text.lower():
                                            self.logger.info(f"üéØ BOT√ÉO ENCONTRADO POR TEXTO: '{button_text}'")
                                            if button.is_displayed() and button.is_enabled():
                                                create_button = button
                                                break
                                    except:
                                        continue
                                
                                # Estrat√©gia 2: Procurar por inputs com value "Crio", "Criar", "Create"
                                if not create_button:
                                    self.logger.info("üîç Estrat√©gia 2: Procurando por inputs...")
                                    for input_elem in all_inputs:
                                        try:
                                            input_value = input_elem.get_attribute("value")
                                            input_type = input_elem.get_attribute("type")
                                            if input_value and ("crio" in input_value.lower() or "criar" in input_value.lower() or "create" in input_value.lower()):
                                                self.logger.info(f"üéØ INPUT ENCONTRADO POR VALUE: '{input_value}' (Type: {input_type})")
                                                if input_elem.is_displayed() and input_elem.is_enabled():
                                                    create_button = input_elem
                                                    break
                                        except:
                                            continue
                                
                                # Estrat√©gia 3: Procurar por elementos com classes espec√≠ficas
                                if not create_button:
                                    self.logger.info("üîç Estrat√©gia 3: Procurando por classes espec√≠ficas...")
                                    try:
                                        # Procurar por bot√µes verdes ou de sucesso
                                        green_buttons = self.driver.find_elements(By.XPATH, "//button[contains(@class, 'green') or contains(@class, 'btn-success') or contains(@class, 'submit')] | //input[contains(@class, 'green') or contains(@class, 'btn-success') or @type='submit']")
                                        for button in green_buttons:
                                            if button.is_displayed() and button.is_enabled():
                                                self.logger.info("üéØ BOT√ÉO VERDE/SUBMIT ENCONTRADO!")
                                                create_button = button
                                                break
                                    except:
                                        pass
                                
                                # Estrat√©gia 4: Procurar por todos os elementos clic√°veis na √°rea do formul√°rio
                                if not create_button:
                                    self.logger.info("üîç Estrat√©gia 4: Procurando por todos os elementos clic√°veis...")
                                    try:
                                        # Procurar na √°rea do formul√°rio principal
                                        form_elements = self.driver.find_elements(By.XPATH, "//form//button | //form//input[@type='submit'] | //form//input[@type='button']")
                                        for element in form_elements:
                                            try:
                                                element_text = element.text.strip()
                                                element_value = element.get_attribute("value")
                                                if (element_text and ("crio" in element_text.lower() or "criar" in element_text.lower() or "create" in element_text.lower())) or \
                                                   (element_value and ("crio" in element_value.lower() or "criar" in element_value.lower() or "create" in element_value.lower())):
                                                    self.logger.info(f"üéØ ELEMENTO DO FORMUL√ÅRIO ENCONTRADO: '{element_text}' (Value: {element_value})")
                                                    if element.is_displayed() and element.is_enabled():
                                                        create_button = element
                                                        break
                                            except:
                                                continue
                                    except:
                                        pass
                                
                                # Estrat√©gia 5: Busca AGRESSIVA por qualquer elemento que contenha "Crio"
                                if not create_button:
                                    self.logger.info("üîç Estrat√©gia 5: Busca AGRESSIVA por 'Crio'...")
                                    try:
                                        # Buscar por TODOS os elementos que contenham "Crio" no texto
                                        all_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Crio') or contains(text(), 'crio') or contains(text(), 'CRIO')]")
                                        self.logger.info(f"üìä Encontrados {len(all_elements)} elementos com 'Crio' no texto")
                                    
                                        for i, element in enumerate(all_elements):
                                            try:
                                                element_text = element.text.strip()
                                                element_tag = element.tag_name
                                                element_id = element.get_attribute("id")
                                                element_class = element.get_attribute("class")
                                                
                                                self.logger.info(f"üéØ Elemento {i}: '{element_text}' (Tag: {element_tag}, ID: {element_id}, Class: {element_class})")
                                                
                                                if element.is_displayed() and element.is_enabled():
                                                    self.logger.info("‚úÖ Elemento est√° vis√≠vel e habilitado!")
                                                    create_button = element
                                                    break
                                                else:
                                                    self.logger.info("‚ö†Ô∏è Elemento n√£o est√° vis√≠vel ou habilitado")
                                            except:
                                                continue
                                        
                                        # Se n√£o encontrou, buscar por elementos clic√°veis que contenham "Crio"
                                        if not create_button:
                                            self.logger.info("üîç Buscando elementos clic√°veis com 'Crio'...")
                                            clickable_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Crio') or contains(text(), 'crio') or contains(text(), 'CRIO')]/..")
                                            
                                            for element in clickable_elements:
                                                try:
                                                    if element.is_displayed() and element.is_enabled():
                                                        self.logger.info("üéØ ELEMENTO CLIC√ÅVEL ENCONTRADO!")
                                                        create_button = element
                                                        break
                                                except:
                                                    continue
                                        
                                        # Se ainda n√£o encontrou, buscar por qualquer elemento que contenha "Crio" em qualquer atributo
                                        if not create_button:
                                            self.logger.info("üîç Buscando por atributos que contenham 'Crio'...")
                                            attribute_elements = self.driver.find_elements(By.XPATH, "//*[contains(@id, 'Crio') or contains(@id, 'crio') or contains(@class, 'Crio') or contains(@class, 'crio') or contains(@value, 'Crio') or contains(@value, 'crio')]")
                                            
                                            for element in attribute_elements:
                                                try:
                                                    if element.is_displayed() and element.is_enabled():
                                                        self.logger.info("üéØ ELEMENTO POR ATRIBUTO ENCONTRADO!")
                                                        create_button = element
                                                        break
                                                except:
                                                    continue
                                        
                                        # √öltima tentativa: buscar por qualquer elemento que seja clic√°vel e esteja na √°rea do formul√°rio
                                        if not create_button:
                                            self.logger.info("üîç √öltima tentativa: elementos clic√°veis na √°rea do formul√°rio...")
                                            form_area_elements = self.driver.find_elements(By.XPATH, "//form//*[self::button or self::input or self::a or self::div or self::span]")
                                            
                                            for element in form_area_elements:
                                                try:
                                                    element_text = element.text.strip()
                                                    if "crio" in element_text.lower() or "criar" in element_text.lower():
                                                        self.logger.info(f"üéØ ELEMENTO DO FORMUL√ÅRIO ENCONTRADO: '{element_text}'")
                                                        if element.is_displayed() and element.is_enabled():
                                                            create_button = element
                                                            break
                                                except:
                                                    continue
                                                    
                                    except Exception as e:
                                        self.logger.warning(f"‚ö†Ô∏è Busca agressiva falhou: {str(e)}")
                                        create_button = None
                                
                                if create_button:
                                    # Clicar no bot√£o encontrado
                                    create_button.click()
                                    self.logger.info("‚úÖ Bot√£o 'Crio' clicado com sucesso!")
                                    time.sleep(5)  # Aguardar processamento
                                    
                                    # Verificar se o servi√ßo foi criado com sucesso
                                    try:
                                        # Procurar por mensagem de sucesso ou redirecionamento
                                        success_indicators = [
                                            "service created",
                                            "servi√ßo criado", 
                                            "success",
                                            "sucesso",
                                            "created successfully"
                                        ]
                                        
                                        page_source = self.driver.page_source.lower()
                                        for indicator in success_indicators:
                                            if indicator in page_source:
                                                self.logger.info(f"üéâ Servi√ßo criado com sucesso! Indicador: {indicator}")
                                                break
                                        else:
                                            self.logger.info("‚úÖ Servi√ßo criado (sem confirma√ß√£o espec√≠fica)")
                                            
                                    except Exception as e:
                                        self.logger.info("‚úÖ Servi√ßo criado (verifica√ß√£o de sucesso falhou)")
                                else:
                                    self.logger.warning("‚ö†Ô∏è Bot√£o 'Crio' n√£o encontrado com nenhuma estrat√©gia")
                                
                            except Exception as e:
                                self.logger.warning(f"‚ö†Ô∏è Erro ao clicar no bot√£o 'Crio': {str(e)}")
                            
                            # 13. Aguardar um pouco para o servi√ßo ser processado
                            self.logger.info("‚è≥ Aguardando processamento do servi√ßo...")
                            time.sleep(3)
                            
                            # ‚è∞ AGUARDAR 5 MINUTOS AP√ìS CRIAR O SERVI√áO
                            self.logger.info("‚è∞ Aguardando 5 minutos ap√≥s cria√ß√£o do servi√ßo...")
                            time.sleep(300)  # 300 segundos = 5 minutos
                            self.logger.info("‚úÖ 5 minutos de espera conclu√≠do!")
                        
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è Erro ao configurar slots: {str(e)}")
                        
                        return True
                    else:
                        self.logger.warning("‚ö†Ô∏è Navega√ß√£o pode n√£o ter funcionado")
                        return False
                except Exception as e:
                    self.logger.error(f"‚ùå Erro ao clicar no bot√£o: {str(e)}")
                    return False
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao selecionar propriet√°rio: {str(e)}")
                return False
                    
            except Exception as e:
                self.logger.error(f"‚ùå Campo de propriet√°rio n√£o encontrado: {str(e)}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao criar servi√ßo: {str(e)}")
            return False
    
    def verify_game_service_page(self):
        """Verifica se foi para a p√°gina Create a Game Service"""
        try:
            # Verifica se a URL mudou para a p√°gina de cria√ß√£o de jogo
            current_url = self.driver.current_url.lower()
            if "creategame" in current_url or "game" in current_url:
                return True
            
            # Procura por elementos espec√≠ficos da p√°gina de jogo
            game_indicators = [
                "game service",
                "servi√ßo de jogo",
                "game server",
                "servidor de jogo"
            ]
            
            page_source = self.driver.page_source.lower()
            for indicator in game_indicators:
                if indicator in page_source:
                    return True
            
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar p√°gina de jogo: {str(e)}")
            return False
    
    def verify_service_created(self):
        """Verifica se o servi√ßo foi criado com sucesso"""
        try:
            # Procura por mensagens de sucesso
            success_indicators = [
                "service created",
                "servi√ßo criado",
                "success",
                "sucesso",
                "created successfully",
                "criado com sucesso"
            ]
            
            page_source = self.driver.page_source.lower()
            for indicator in success_indicators:
                if indicator in page_source:
                    return True
            
            # Verifica se a URL mudou (indicando redirecionamento)
            current_url = self.driver.current_url
            if "create" not in current_url.lower():
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar cria√ß√£o do servi√ßo: {str(e)}")
            return False
    
    def process_single_order(self, order_id):
        """Processa um pedido espec√≠fico"""
        try:
            self.logger.info(f"üîÑ Processando pedido individual: {order_id}")
            
            # 1. Busca dados do pedido no Supabase
            order_data = self.get_order_from_supabase(order_id)
            if not order_data:
                self.logger.error(f"‚ùå N√£o foi poss√≠vel obter dados do pedido {order_id}")
                return False
            
            # 2. Verifica se o pedido est√° pendente
            if order_data.get('status') != 'pending':
                self.logger.warning(f"‚ö†Ô∏è Pedido {order_id} n√£o est√° pendente (status: {order_data.get('status')})")
                return False
            
            # 3. Navega para a p√°gina de cria√ß√£o
            if not self.navigate_to_create_user():
                self.logger.error(f"‚ùå Falha ao navegar para cria√ß√£o de usu√°rio")
                self.update_order_status_in_supabase(order_id, 'failed')
                return False
            
            # 4. Cria o usu√°rio
            if self.create_user_in_tcadmin(order_data):
                self.update_order_status_in_supabase(order_id, 'completed')
                self.logger.info(f"üéâ Pedido {order_id} processado com sucesso!")
                return True
            else:
                self.update_order_status_in_supabase(order_id, 'failed')
                self.logger.error(f"‚ùå Falha ao processar pedido {order_id}")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no processamento do pedido {order_id}: {str(e)}")
            self.update_order_status_in_supabase(order_id, 'failed')
            return False
    
    def close_browser(self):
        """Fecha o navegador e finaliza o driver"""
        try:
            if self.driver:
                self.driver.quit()
                self.logger.info("‚úÖ Navegador fechado com sucesso")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao fechar navegador: {str(e)}")
    
    def run_automation_for_order(self, order_id):
        """Executa automa√ß√£o para um pedido espec√≠fico"""
        try:
            self.logger.info(f"üöÄ === Bot de Automa√ß√£o TCAdmin - Pedido {order_id} ===")
            self.logger.info("üéØ Processa pedido individual ap√≥s pagamento")
            self.logger.info("üë§ Inclui se√ß√£o de perfil com dados do Supabase")
            
            # 1. Configura o driver
            if not self.setup_driver():
                return False
            
            # 2. Navega para o painel admin
            if not self.navigate_to_admin_panel():
                return False
            
            # 3. Realiza login
            username = "bernardol"
            password = "Xyr+(191oTPZ7i"
            
            if not self.login(username, password):
                self.logger.error("‚ùå Falha no login - abortando")
                return False
            
            # 4. Processa o pedido espec√≠fico
            if not self.process_single_order(order_id):
                self.logger.error("‚ùå Falha no processamento do pedido")
                return False
            
            self.logger.info("üéâ Automa√ß√£o conclu√≠da com sucesso!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante automa√ß√£o: {str(e)}")
            return False
        finally:
            # Sempre fecha o navegador
            self.close_browser()


def main():
    """Fun√ß√£o principal do bot"""
    import sys
    
    if len(sys.argv) != 2:
        print("‚ùå Uso: python3 bot_tcadmin.py <order_id>")
        print("üìã Exemplo: python3 bot_tcadmin.py 12345678-1234-1234-1234-123456789012")
        print()
        print("üéØ Funcionalidades:")
        print("   ‚Ä¢ Busca pedido no Supabase")
        print("   ‚Ä¢ Cria usu√°rio no TCAdmin")
        print("   ‚Ä¢ Preenche dados do perfil (telefone, email, fuso hor√°rio)")
        print("   ‚Ä¢ Atualiza status do pedido")
        return
    
    order_id = sys.argv[1]
    
    print(f"=== Bot de Automa√ß√£o TCAdmin - Pedido {order_id} ===")
    print("üéØ Processa pedido individual ap√≥s pagamento")
    print("üë§ Inclui se√ß√£o de perfil com dados do Supabase")
    print("üìû Busca telefone na tabela profiles")
    print("üìß Preenche email prim√°rio")
    print("üåç Configura fuso hor√°rio para Bras√≠lia")
    print()
    
    # Configura√ß√µes do bot
    headless = False  # Modo visual para demonstra√ß√£o
    
    # Inicializa e executa o bot
    bot = TCAdminBot(headless=headless)
    
    try:
        success = bot.run_automation_for_order(order_id)
        
        if success:
            print(f"\n‚úÖ Pedido {order_id} processado com sucesso!")
            print("üìã Verifique o arquivo 'tcadmin_bot/bot_automation.log' para detalhes completos")
            print("üéØ Usu√°rio foi criado no TCAdmin automaticamente")
            print("üë§ Dados de perfil foram preenchidos com sucesso")
            print("üìä Status do pedido foi atualizado no Supabase")
        else:
            print(f"\n‚ùå Falha no processamento do pedido {order_id}.")
            print("üìã Verifique os logs para mais detalhes.")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
    finally:
        print("Bot finalizado.")


if __name__ == "__main__":
    main()
